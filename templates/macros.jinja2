{% macro view_post(post, tag_list, url=None, set_id=True) %}
<span id="s{{post.id}}" class="thumb">
	{% if url!="None" %}
		<a {% if set_id==True %}id="pa{{post.id}}"{% endif %} href="{{url or url_for('view_post', id=post.id)}}">
	{% endif %}

		<img {% if set_id==True %}id="p{{post.id}}"{% endif %} src="{{url_for('view_post_thumbnail', id=post.id)}}"
		alt="{% for i in tag_list %}{{i[1]}} {% endfor %}" title=" {% for i in tag_list %}{{i[1]}} {% endfor %}  score:{{post.score}} rating:{{post.rating.value}} " class="preview " border="0">

	{% if url!="None" %}
		</a>
	{% endif %}

</span>
{% endmacro %}

{% macro search_bar(query, advanced_mode, url=None) %}
<div class="awesomplete">
    <form action="{{url or url_for('search')}}">
        <div id="search_container">
                <span id="tags-noremove">
                    <input class="tags" name="q" size=30 type="text" value="{{ query[0] }}" autocomplete="off" aria-autocomplete="list">
                </span>
{% for i in range(query.__len__()-1) %}
<div id="tags-pre-{{i}}">
	<input class="tags" name="q" size=30 type="text" value="{{query[i+1]}}" autocomplete="off" aria-autocomplete="list">
	<button title="Remove this field" onclick="removeElement("tags-pre-{{i}}");return false;">-</button>
</div>
{% endfor %}
		{#<input id="tags-0" class="tags" name="q" size="30" type="text" value="{{query[0]}}" autocomplete="off" aria-autocomplete="list">
		#}
		<div id="search_btn_grp">
{% if advanced_mode %}
                        <button onclick="addField();return false;" title="Add another field">
                            +
                        </button>
{% endif %}
                    <input type="submit" />
                </div>
        	<ul hidden=""></ul>
	<span class="visually-hidden" role="status" aria-live="assertive" aria-relevant="additions"></span>
    </form>
</div>
{% if advanced_mode %}
<script>
function removeElement(id) {
    document.getElementById(id).remove();
}


var searchContainer = document.getElementById("search_container");
var searchButtonGroup = document.getElementById("search_btn_grp");

function addField(after_id) {
    var fieldBlock = document.createElement("div");
    let rand = Math.random().toString(36).substring(7);
    fieldBlock.id = "tags-" + rand;
    fieldBlock.innerHTML = '{#
#} <input class="tags" name="q" size=30 type="text" autocomplete="off" aria-autocomplete="list"> {#
#} <button title="Remove this field" onclick="removeElement(\'' + "tags-" + rand + '\');return false;">-</button>'
    searchContainer.insertBefore(fieldBlock, searchButtonGroup);
    
    document.querySelectorAll('#tags, .tags, .tagfield, *[name="my_tags"], #stags, *[name="tags"]').forEach(function(e) {
        setUp(e);
    });
}
</script>
{% endif %}

<script src="https://cdnjs.cloudflare.com/ajax/libs/awesomplete/1.1.5/awesomplete.min.js" integrity="sha512-HcBl0GSJvt4Qecm4srHapirUx0HJDi2zYXm6KUKNNUGdTIN9cBwakVZHWmRVj4MKgy1AChqhWGYcMDbRKgO0zg==" crossorigin="anonymous"></script>
<script>
function setUp(elem) {
    var a;

    if (elem != null) {
        var linput = "";
        elem.oninput = function(evt) {
            var val = evt.target.value;
            val = val.match(/[^ -][^ ]*$/)[0];
            console.log("GET FOR", val);
            if (evt.keyCode == 32) {
                a.list = [];
            } else {
                var ajax = new XMLHttpRequest();
                ajax.open("GET", "{{ url_for('autocomplete_tags') }}?q=" + val, true);
                ajax.onload = function() {
                    var list = JSON.parse(ajax.responseText);
                    a.list = list;
                    a.evaluate();
                    a._events.input.keydown(evt);
                };
                ajax.send();
            }
        };

        a = new Awesomplete(elem, {
            minChars: 1,
            list: [],
            filter: function(text, input) {
                return Awesomplete.FILTER_STARTSWITH(text.value, input.match(/[^ -][^ ]*$/)[0]);
            },
            sort: false,
            item: function(text, input) {
                var ITEM = function (text, input) {
                    var html = input.trim() === "" ? text.label : text.label.replace(RegExp(Awesomplete.$.regExpEscape(input.trim()), "gi"), "<mark>$&</mark>");
                    return Awesomplete.$.create("li", {
                        innerHTML: html,
                        "aria-selected": "false"
                    });
                };
                console.log({text: text, input: input});
                console.log(text.label);
                return Awesomplete.ITEM(text, input.match(/[^ -][^ ]*$/)[0]);
            }, 

            replace: function(text) {
                
                var before = this.input.value.match(/^(.+ )?[\s-]*|/)[0];
                this.input.value = before + text.value + " ";
            }
        })
    }
}

window.onload = function() {

    var doAutocomplete = localStorage.getItem("doAutocomplete");
    if (doAutocomplete == null) {
        doAutocomplete = "true";
        localStorage.setItem("doAutocomplete", doAutocomplete);
    }

    

    if (doAutocomplete == "true") {
        document.querySelectorAll('#tags, .tags, .tagfield, *[name="my_tags"], #stags, *[name="tags"]').forEach(function(e) {
            setUp(e);
        });
    }

    if (document.querySelector("#showAutocomplete") != null) {
        if (doAutocomplete == "true") {
            document.querySelector("#showAutocomplete").checked = true;
        }

        document.querySelector("#showAutocomplete").onchange = function(evt) {
            if (evt.target.checked) {
                localStorage.setItem("doAutocomplete", "true");
            } else {
                localStorage.setItem("doAutocomplete", "false");
            }

            if (document.querySelector("#tags") != null) {
                location.reload();
            }
        }
    }


};
</script>
<style>
.awesomplete [hidden] {
 display:none
}
.awesomplete .visually-hidden {
 position:absolute;
 clip:rect(0,0,0,0)
}
.awesomplete {
 display:inline-block;
 position:relative
}
.awesomplete>input {
 display:block
}
.awesomplete>ul {
 position:absolute;
 left:0;
 z-index:1;
 min-width:100%;
 box-sizing:border-box;
 list-style:none;
 padding:0;
 margin:0;
 background:#fff
}
.awesomplete>ul:empty {
 display:none
}
.awesomplete>ul {
 border-radius:.3em;
 margin:.2em 0 0;
 background:hsla(0,0%,100%,.9);
 background:linear-gradient(to bottom right,white,hsla(0,0%,100%,.8));
 border:1px solid rgba(0,0,0,.3);
 box-shadow:.05em .2em .6em rgba(0,0,0,.2);
 text-shadow:none
}
@supports(transform:scale(0)) {
 .awesomplete>ul {
  transition:.3s cubic-bezier(.4,.2,.5,1.4);
  transform-origin:1.43em -.43em
 }
 .awesomplete>ul[hidden],
 .awesomplete>ul:empty {
  opacity:0;
  transform:scale(0);
  display:block;
  transition-timing-function:ease
 }
}
.awesomplete>ul:before {
 content:"";
 position:absolute;
 top:-.43em;
 left:1em;
 width:0;
 height:0;
 padding:.4em;
 background:#fff;
 border:inherit;
 border-right:0;
 border-bottom:0;
 -webkit-transform:rotate(45deg);
 transform:rotate(45deg)
}
.awesomplete>ul>li {
 position:relative;
 padding:.2em .5em;
 cursor:pointer
}
.awesomplete>ul>li:hover {
 background:#b8d3e0;
 color:#000
}
.awesomplete>ul>li[aria-selected=true] {
 background:#3d6d8f;
 color:#fff
}
.awesomplete mark {
 background:#eaff00
}
.awesomplete li:hover mark {
 background:#b5d100
}
.awesomplete li[aria-selected=true] mark {
 background:#3d6b00;
 color:inherit
}
</style>
{% endmacro %}
